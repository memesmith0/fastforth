#!/bin/env sh
fastforth(){
#fastforth - john morris beck - license: gpl2 - https://gnu.org
#the fastforth code and may be licensed differently, so long as using
#the fastforth function alongside that code does not conflict with the
#gpl2. see copyright law regarding to programming languages, and licensing
#the output of compilers bear in mind this compiter is a self printing quine
#and that it is meant to be embedded into another file
#https://github.com/memesmith0 https://thefastscrolls.neocities.org
fastforth_core="$( cat << 'fastforth_core_end'
fastforth_call(){ eval "$1";};
fastforth_print(){ printf '%s' "$1" | sed 's/.$//';};
fastforth_memory_terminator="m";
fastforth_posix_array_write(){ eval "fastforth_memory_$(printf '%s' "$1" | od -An -tx1 | tr -d ' \n')$fastforth_memory_terminator=\"\$2 \"";};
fastforth_posix_array_read(){ eval "printf '%s' \"\$fastforth_memory_$(printf '%s' "$1" | od -An -tx1 | tr -d ' \n')$fastforth_memory_terminator\"";};
fastforth_stack_head="0";
fastforth_push(){ fastforth_stack_head="$(( fastforth_stack_head + 1 ))"; fastforth_posix_array_write "fastforth_stack_$fastforth_stack_head" "$1";};
fastforth_peek(){ fastforth_posix_array_read "fastforth_stack_$fastforth_stack_head";}; 
fastforth_drop(){ fastforth_posix_array_write "fastforth_stack_$fastforth_stack_head" "";fastforth_stack_head=$(( fastforth_stack_head - 1));};
fastforth_interactive_shell_command(){ eval "$(fastforth_peek)";fastforth_drop;};
fastforth_captured_shell_command(){
    fastforth_shell_command="$(fastforth_peek)";fastforth_drop;
    fastforth_shell_command_stdout="$(fastforth_peek)";fastforth_drop;
    fastforth_shell_command_stderr="$(fastforth_peek)";fastforth_drop;
    fastforth_posix_array_write "$fastforth_shell_command_stdout" "$( sh -c "$fastforth_shell_command" 2> "$fastforth_shell_command_stderr" )";}; 
fastforth_async_captured_shell_command(){ (captured_fastforth_shell_command)&}; 
fastforth_space(){ fastforth_push " ";}; 
fastforth_newline(){ fastforth_push "
";};
fastforth_concatenate(){
fastforth_concatenate_a="$(fastforth_peek)";fastforth_drop;
fastforth_concatenate_b="$(fastforth_peek)";fastforth_drop;
fastforth_stack_head="$(( fastforth_stack_head + 1 ))";
eval "fastforth_memory_$(printf '%s' "fastforth_stack_$fastforth_stack_head" | od -An -tx1 | tr -d ' \n')$fastforth_memory_terminator=\"\$(fastforth_print \"\$fastforth_concatenate_a\";printf '%s' \"\$fastforth_concatenate_b\";) \"";
fastforth_concatenate_a="";
fastforth_concatneate_b="";
}; 
fastforth_string(){ fastforth_push "$(printf '%s' "$1" | awk 'function H(h){h=tolower(h);return index("0123456789abcdef",h)-1}{r="";for(i=1;i<=length;i+=2)r=r sprintf("%c",(H(substr($0,i,1))*16)+H(substr($0,i+1,1)));printf "%s",r}') ";};
fastforth_header="$( cat << 'fastforth_header_end'
#!/bin/env sh
fastforth(){
#fastforth - john morris beck - license: gpl2 - https://gnu.org
#the fastforth code and may be licensed differently, so long as using
#the fastforth function alongside that code does not conflict with the
#gpl2. see copyright law regarding to programming languages, and licensing
#the output of compilers bear in mind this compiter is a self printing quine
#and that it is meant to be embedded into another file
#https://github.com/memesmith0 https://thefastscrolls.neocities.org
fastforth_core="$( cat << 'fastforth_core_end'
fastforth_header_end
)";
fastforth_footer="$( cat << 'fastforth_footer_end'
)";
if [ "$fastforth_core_evaluated" != "yes" ]; then fastforth_core_evaluated="yes"; eval "$fastforth_core";fi;
}; fastforth;
fastforth_footer_end
			 )";
fastforth_core_end_string="fastforth_core_end
";
fastforth_compiler(){
    fastforth_compiler_fastforth_core_flag="$(fastforth_peek)";fastforth_drop;
    fastforth_compiler_data_a="$(printf "%s" "$(fastforth_peek)" | awk '!/^#/')"; fastforth_drop; #remove comments
    fastforth_compiler_data_b="$(printf "%s" "$fastforth_compiler_data_a" | awk  '{for(i=1;i<=NF;i++){modifier=((i>1 && $(i-1)=="string")?"":"fastforth_");printf "%s%s%s%s",(i==1?"":OFS),((i>1 && $(i-1)=="string")?"":modifier),$i,((i==NF)?OFS:"");prev=$i}print ""}'     )"; #name everything fastforth_ except string bullshit
    fastforth_compiler_data_a="$(printf "%s" "$fastforth_compiler_data_b" | awk '{for(i=1;i<=NF;i++){if(i>1 && $(i-1)=="fastforth_string"){system("printf \"%s\" \""$i"\" | od -An -tx1 | tr -d \" \\n\"; printf \" \"")}else{printf "%s ",$i}}print ""}' )"
    fastforth_compiler_data_b="$(printf "%s" "$fastforth_compiler_data_a" | awk '{output = "";for (i = 1; i <= NF; ++i) {if (i > 1) {if ($(i-1) == "string" || $(i-1) == "fastforth_string") {output = output " " $i;} else {output = output ";" $i;}} else {output = $i;}}print output;}')";
    if [ "$fastforth_compiler_fastforth_core_flag" != "yes " ]; then fastforth_push "$fastforth_compiler_data_b"; else
    fastforth_push "$fastforth_header
$fastforth_core
$fastforth_core_end_string$fastforth_footer
$fastforth_compiler_data_b";
fi;
fastforth_compiler_data_a="";
fastforth_compiler_data_b="";
    };
fastforth_core_end
)";
if [ "$fastforth_core_evaluated" != "yes" ]; then fastforth_core_evaluated="yes"; eval "$fastforth_core";fi;
}; fastforth;
fastforth_push "$(cat fastforth_test.fastforth)"
fastforth_push "yes"
fastforth_compiler

