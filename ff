#!/bin/env sh
fastforth(){
#fastforth - john morris beck - license: gpl2 - https://gnu.org
#the fastforth code and may be licensed differently, so long as using
#the fastforth function alongside that code does not conflict with the
#gpl2. see copyright law regarding to programming languages, and licensing
#the output of compilers
#https://github.com/memesmith0 https://thefastscrolls.neocities.org
fastforth_core="$( cat << 'fastforth_core_end'
posix_array_write(){ eval "memory$(printf "%s" "$1" | base64 | sed 's|/|_a|g; s|=|_b|g; s|+|.|g')=$(printf "%s" "$2" | base64 | sed 's|/|_a|g; s|=|_b|g; s|+|.|g')";};
posix_array_read(){ eval "printf '%s' \"\$memory$(printf "%s" "$1" | base64 | sed 's|=|_b|g; s|+|.|g')\"" | sed 's|_a|/|g; s|_b|=|g; s|\.|+|g' | base64 -d ;};
fastforth_root_folder="/dev/shm/fastforth" 
mkdir "$fastforth_root_folder" 2> /dev/null;
fastforth_process_id="process_$$_$( dd if=/dev/urandom bs=1 count=16 2>/dev/null | od -A n -t x1 | tr -d ' \n' )";
fastforth_folder_of_this_process="$fastforth_root_folder/$fastforth_process_id"
if [ -d "$fastforth_folder_of_this_process" ]; then exit;fi;
mkdir "$fastforth_folder_of_this_process" 2>/dev/null;
fastforth_cleanup(){ rm -rf "$fastforth_folder_of_this_process";};
trap "fastforth_cleanup" EXIT HUP
fastforth_stack="$fastforth_folder_of_this_process/fastforth_stack";
mkdir "$fastforth_stack" 2>/dev/null;
fastforth_stack_head="0";
fastforth_push(){  printf "%s" "$1" > "$fastforth_stack/$fastforth_stack_head"; fastforth_stack_head="$(( fastforth_stack_head + 1 ))";};
peek(){ peek_head=$(( fastforth_stack_head - $1)); cat "$fastforth_stack/$peek_head" || exit;};
drop(){ fastforth_stack_head=$(( fastforth_stack_head - 1));rm -f "$fastforth_stack/$fastforth_stack_head" || exit;};
fastforth_memory="$fastforth_folder_of_this_process/fastforth_memory";
mkdir "$fastforth_memory" 2>/dev/null;
fastforth_write(){ peek 2 > "$fastforth_memory/$( peek 1)";drop;drop;};
fastforth_read(){ read_location="$fastforth_memory/$( peek 1 )"; drop; fastforth_push "$(cat "$read_location")";};
fastforth_shell_files="$fastforth_folder_of_this_process/shell";
mkdir "$fastforth_shell_files" 2>/dev/null;
fastforth_shell_files_head="0";
interactive_fastforth_shell_command(){ eval "$(peek 1)";drop;};
captured_fastforth_shell_command(){
    fastforth_this_shell_id="$fastforth_shell_files_head";
    fastforth_shell_files_head=$((fastforth_shell_files_head + 1));
    fastforth_shell_stdout_file="$fastforth_shell_files/$fastforth_this_shell_id.stdout";
    fastforth_shel_stderr_file="$fastforth_shell_files/$fastforth_this_shell_id.stderr";
    fastforth_shell_command="$(peek 1)";
    drop;
    fastforth_push "$fastforth_this_shell_id.stdout";
    fastforth_push "$fastforth_this_shell_id.stderr";
    sh -c "$fastforth_shell_command" > "$fastforth_shell_stdout_file" 2> "$fastforth_shel_stderr_file";};
fastforth_read_shell_memory(){ foo="$( cat "$fastforth_shell_files/$( peek 1 )")"; drop; fastforth_push "$foo"; }
fastforth_async_captured_shell_command(){ (captured_fastforth_shell_command)&};
fastforth_space(){ fastforth_push " ";};
fastforth_newline(){ fastforth_push "
";};
fastforth_concatenate(){ "$fastforth_memory/$( peek 1 )" >> "$fastforth_memory/$( peek 2 )"; drop; drop;};
fastforth_print(){ cat "$fastforth_memory/$( peek 1 )"; drop;};
fastforth_string(){ fastforth_push "$( printf "%s" "$1" | xxd -r -p)";};
fastforth_header="$( cat << 'fastforth_header_end'
#!/bin/env sh
fastforth(){
#fastforth - john morris beck - license: gpl2 - https://gnu.org
#the code oustside of the fastforth shell function is not part of
#the fastforth code and may be licensed differently, so long as using
#the fastforth function alongside that code does not conflict with the
#gpl2. see copyright law regarding to programming languages, and licensing
#the output of compilers
#https://github.com/memesmith0 https://thefastscrolls.neocities.org
fastforth_core="$( cat << 'fastforth_core_end'
fastforth_core="$( cat << 'fastforth_core_end'
fastforth_header_end
)";
fastforth_footer="$( cat << 'fastforth_footer_end'
)"; if [ "$fastforth_core_evaluated" = "$0" ]; then fastforth_core_evaluated="yes";eval "$fastforth_core";fi;
fastforth_source_evaluated=1;
eval "$fastforth_source";
fastforth_footer_end
)";
fastforth_compiler(){
    fastforth_compiler_dest="$( peek 1)"; drop;
    fastforth_compiler_source="$( peek 1)"; drop;
    (
p    fastforth_compiler_data="$fastforth_folder_of_this_process/fastforth_memory/$fastforth_compiler_source_$$_$( dd if=/dev/urandom bs=1 count=16 2>/dev/null | od -A n -t x1 | tr -d ' \n' )";
    awk '{for(i=1;i<=NF;i++){modifier=(prev=="string")?"":"fastforth_";printf "%s%s%s",(i==1?"":OFS),$i,modifier;prev=$i}print ""}' "$fastforth_compiler_source" > "$fastforth_folder_of_this_process/compiler_data_a";
    awk '!/^#/' "$fastforth_folder_of_this_process/compiler_data_a"; > "$fastforth_folder_of_this_process/compiler_data_b";
    awk '{ for (i=1; i<=NF; i++) { if ($(i-1) == "string") printf "%s ", sprintf("%x", $i); else printf "%s ", $i } print "" }'  "$fastforth_compiler_data.b" > "$fastforth_compiler_data.a";xb
    awk '{output = "";for (i = 1; i <= NF; ++i) {if (i > 1) {if ($(i-1) == "string") {output = output " " $i;} else {output = output ":" $i;}} else {output = $i;}}print output;}' "$fastforth_compiller_data.b" > "$fastforth_compiler_data.a";
    printf "%s" "$fastforth_header" > "$fastforth_compiler_dest";
    printf "%s" "$fastforth_core" >> "$fastforth_compiler_dest";
    printf "%s" "fastforth_core_end" >> "$fastforth_compiler_dest";
    printf "%s" "$fastforth_footer" >> "$fastforth_compier_dest";
    cat "$fastforth_compiler_data.b" >> "$fastforth_compiler_dest";
    rm "$fastforth_compiler_data.a" "$fastforth_compiler_data.b";
    )
    };
fastforth_core_end
)";  if [ "$fastforth_core_evaluated" != "yes" ]; then fastforth_core_evaluated="yes";eval "$fastforth_core";fi;
}; fastforth;
