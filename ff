#!/bin/env sh
fastforth(){
#fastforth - john morris beck - license: gpl2 - https://gnu.org
#the fastforth code and may be licensed differently, so long as using
#the fastforth function alongside that code does not conflict with the
#gpl2. see copyright law regarding to programming languages, and licensing
#the output of compilers bear in mind this compiter is a self printing quine
#and that it is meant to be embedded into another file
#https://github.com/memesmith0 https://thefastscrolls.neocities.org
fastforth_core="$( cat << 'fastforth_core_end'
fastforth_call(){ eval "$1";};readonly -f fastforth_call;
LC_COLLATE="C"; readonly LC_COLLATE;
LANG="C"; readonly LANG;
fastforth_print(){ printf '%s' "$1" | sed 's/.$//';}; readonly -f fastforth_print;
fastforth_posix_array_write(){ case "$1" in [0-9a-zA-Z_]* ) eval "$1=\"\$2 \"" ;; *) exit ;; esac;}; readonly -f fastforth_posix_array_write;
fastforth_posix_array_read(){ case "$1" in [0-9a-zA-Z_]* ) eval "fastforth_print \"\$$1\"" ;;  *) exit ;; esac;}; readonly -f fastforth_posix_array_read;
fastforth_stack_head="0";
fastforth_push(){ fastforth_stack_head="$(( fastforth_stack_head + 1 ))"; fastforth_posix_array_write "fastforth_stack_$fastforth_stack_head" "$1 ";}; readonly -f fastforth_push;
fastforth_peek(){ fastforth_posix_array_read "fastforth_stack_$fastforth_stack_head";}; readonly -f fastforth_peek;
fastforth_drop(){ fastforth_posix_array_write "fastforth_stack_$fastforth_stack_head" "";fastforth_stack_head=$(( fastforth_stack_head - 1));}; readonly -f fastforth_drop;
fastforth_interactive_shell_command(){ eval "$(fastforth_peek)";fastforth_drop;}; readonly -f fastforth_interactive_shell_command;
fastforth_captured_shell_command(){
    fastforth_shell_command="$(fastforth_peek)";fastforth_drop;
    fastforth_shell_command_stdout="$(fastforth_peek)";fastforth_drop;
    fastforth_shell_command_stderr="$(fastforth_peek)";fastforth_drop;
    fastforth_posix_array_write "$fastforth_shell_command_stdout" "$( sh -c "$fastforth_shell_command" 2> "$fastforth_shell_command_stderr" )";}; readonly -f fastforth_captured_shell_command; #this version does not properly capture stderr into a variable
fastforth_async_captured_shell_command(){ (captured_fastforth_shell_command)&}; readonly -f fastforth_async_captured_shell_command;
fastforth_space(){ fastforth_push " ";}; readonly -f fastforth_space;
fastforth_newline(){ fastforth_push "
";}; readonly -f fastforth_newline;
fastforth_concatenate(){
fastforth_concatenate_a="$(fastforth_peek)";fastforth_drop;
fastforth_concatenate_b="$(fastforth_peek)";fastforth_drop;
fastforth_stack_head="$(( fastforth_stack_head + 1 ))";
eval "fastforth_stack_$fastforth_stack_head=\"\$(fastforth_print \"\$fastforth_concatenate_a\";printf '%s' \"\$fastforth_concatenate_b\";) \"";
fastforth_concatenate_a="";
fastforth_concatneate_b="";
}; readonly -f fastforth_concatenate;
fastforth_string(){ decoded_string="$(fastforth_print "$1" | awk '{result=""; for(i=1; i<=length; i+=2) result = result sprintf("%c", strtonum("0x" substr($0, i, 2))); printf "%b", result}')";
fastforth_push "$decoded_string ";
};readonly -f fastforth_string;
fastforth_header="$( cat << 'fastforth_header_end'
#!/bin/env sh
fastforth(){
#fastforth - john morris beck - license: gpl2 - https://gnu.org
#the fastforth code and may be licensed differently, so long as using
#the fastforth function alongside that code does not conflict with the
#gpl2. see copyright law regarding to programming languages, and licensing
#the output of compilers bear in mind this compiter is a self printing quine
#and that it is meant to be embedded into another file
#https://github.com/memesmith0 https://thefastscrolls.neocities.org
astforth_core="$( cat << 'fastforth_core_end'
fastforth_header_end
)";readonly fastforth_header;
fastforth_footer="$( cat << 'fastforth_footer_end'
)"; readonly fastforth_core;
if [ "$fastforth_core_evaluated" != "yes" ]; then fastforth_core_evaluated="yes"; readonly fastforth_core_evaluated;  eval "$fastforth_core";fi;
}; fastforth;
fastforth_footer_end
			 )"; readonly fastforth_footer;
fastforth_core_end_string="fastforth_core_end
"; readonly fastforth_core_end_string;
fastforth_compiler(){
    fastforth_compiler_dest="$(fastforth_peek)";fastforth_drop;
    fastforth_compiler_source="$(fastforth_peek)";fastforth_drop;
    fastforth_compiler_fastforth_core_flag="$(fastforth_peek)";fastforth_drop;
    fastforth_compiler_data_a="$(printf "%s" "$fastforth_compiler_source" | awk '!/^#/')"; #remove comments
    fastforth_compiler_data_b="$(printf "%s" "$fastforth_compiler_data_a" | awk '{for(i=1;i<=NF;i++){modifier=(prev=="string")?"":"fastforth_";printf "%s%s%s",(i==1?"":OFS),$i,modifier;prev=$i}print ""}')"; #name everything fastforth_ except string bullshit

    fastforth_compiler_data_a="$(printf "%s" "$fastforth_compiler_data_b" | awk '{ for (i=1; i<=NF; i++) { if ($(i-1) == "string") printf "%s ", sprintf("%x", $i); else printf "%s ", $i } print "" }')"; #turn strings to hex
    fastforth_compiler_data_b="$(printf "%s" "$fastforth_compiler_data_a" | awk '{output = "";for (i = 1; i <= NF; ++i) {if (i > 1) {if ($(i-1) == "string") {output = output " " $i;} else {output = output ";" $i;}} else {output = $i;}}print output;}')";
    if [ "$fastforth_compiler_fastforth_core_flag" != "yes" ]; then fastforth_push "$fastforth_compiler_data_b"; else 
    fastforth_compiler_data_a="$fastforth_header
$fastforth_core
$fastforth_core_end_string
$fastforth_footer
$fastforth_compiler_data_b";
fi;
fastforth_compiler_data_a="";
fastforth_compiler_data_b="";
    };
fastforth_core_end
)"; readonly fastforth_core;
if [ "$fastforth_core_evaluated" != "yes" ]; then fastforth_core_evaluated="yes"; readonly fastforth_core_evaluated;  eval "$fastforth_core";fi;
}; fastforth;

